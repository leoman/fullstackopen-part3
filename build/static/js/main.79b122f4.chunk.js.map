{"version":3,"sources":["services/requestService.js","notification.js","filter.js","personform.js","persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","delete","newPerson","put","Notification","message","className","type","text","Filter","filter","handleFilter","value","onChange","e","target","PersonForm","name","number","handleNewName","handleNewNumber","handleNewPerson","onClick","Persons","persons","handleDeleteNumber","map","person","key","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setFilter","setMessage","useEffect","a","Service","response","data","console","log","fetchData","checkForUnique","reduce","prev","curr","toLowerCase","setNewMessage","setTimeout","preventDefault","unique","window","confirm","oldPersonIndex","findIndex","splice","error","newPersons","filteredPersons","includes","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.79b122f4.chunk.js","sourcesContent":["  \nimport axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAllPersons = () => axios.get(baseUrl)\n\nconst createPerson = newObject => axios.post(baseUrl, newObject)\n\nconst deletePerson = id => axios.delete(`${baseUrl}/${id}`)\n\nconst updatePerson = (id, newPerson) => axios.put(`${baseUrl}/${id}`, newPerson)\n\nexport default { getAllPersons, createPerson, deletePerson, updatePerson }","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className={message.type}>\r\n      {message.text}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification;","import React from 'react'\r\n\r\nconst Filter = ({ filter, handleFilter }) => (\r\n  <form>\r\n      <div>filter shown with: <input type=\"text\" value={filter} onChange={(e) => handleFilter(e.target.value)} /></div>\r\n  </form>\r\n);\r\n\r\nexport default Filter;","import React from 'react'\r\n\r\nconst PersonForm = ({ name, number, handleNewName, handleNewNumber, handleNewPerson}) => (\r\n  <form>\r\n      <div>name: <input type=\"text\" value={name} onChange={(e) => handleNewName(e.target.value)} /></div>\r\n      <div>number: <input type=\"text\" value={number}  onChange={(e) => handleNewNumber(e.target.value)} /></div>\r\n      <div><button type=\"submit\" onClick={(e) => handleNewPerson(e)}>add</button></div>\r\n  </form>\r\n);\r\n\r\nexport default PersonForm;","import React from 'react'\n\nconst Persons = ({ persons, handleDeleteNumber }) => (\n  <div>\n    {persons.map((person) => (\n      <p key={person.name}>{person.name} {person.number} <button onClick={() => handleDeleteNumber(person)}>delete</button></p>\n    ))}\n  </div>\n);\n\nexport default Persons;","import React, { useState, useEffect } from 'react'\nimport Service from './services/requestService'\nimport Notification from './notification'\nimport Filter from './filter'\nimport PersonForm from './personform'\nimport Persons from './persons'\nimport './App.css'\n\nconst App = () => {\n\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ message, setMessage ] = useState(null)\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await Service.getAllPersons();\n        const { data } = response\n        setPersons(data) \n      } catch(e) {\n        console.log(e);\n      }\n    }\n    fetchData();\n  }, [])\n\n  const checkForUnique = name => persons.reduce((prev, curr) => (curr.name.toLowerCase() === name.toLowerCase()) ? curr : prev, false);\n\n  const setNewMessage = message => {\n    setMessage(message);\n    setTimeout(() => {\n      setMessage(null)\n    }, 5000);\n  }\n\n  const handleNewPerson = async (e) => {\n    e.preventDefault();\n\n    setNewName('');\n    setNewNumber('');\n\n    const unique = checkForUnique(newName);\n    const newPerson = { name: newName, number: newNumber };\n\n    if(unique) {\n      if (window.confirm(`${newName} is already added to the phonebook, replace the old number with a new one?`)) {\n\n        Service.updatePerson(unique.id, newPerson);\n        const oldPersonIndex = persons.findIndex(person => person.id === unique.id)\n        persons.splice(oldPersonIndex, 1, newPerson);\n\n        try {\n          await setPersons(persons);\n          setNewMessage({\n            text: `Updated '${newName}'`,\n            type: 'notification'\n          });\n        } catch(error) {\n          setNewMessage({\n            text: error.response.data.error,\n            type: 'error'\n          });\n        }\n      }\n    } else {\n      const newPerson = { name: newName, number: newNumber };\n      \n      try {\n        await Service.createPerson(newPerson);\n\n        setPersons([...persons, newPerson]);\n        setNewMessage({\n          text: `Added '${newName}'`,\n          type: 'notification'\n        });\n      } catch(error) {\n        setNewMessage({\n          text: error.response.data.error,\n          type: 'error'\n        });\n      }\n      \n    }\n  }\n\n  const handleNewName = name => setNewName(name);\n  const handleNewNumber = number => setNewNumber(number);\n  const handleDeleteNumber = async ({name, id}) => {\n    if (window.confirm(`Delete ${name}`)) {\n      try {\n        await Service.deletePerson(id);\n        const newPersons = persons.filter((person) => person.name !== name);\n        setPersons(newPersons);\n      } catch(e) {\n        setNewMessage({\n          text: `Information of '${name}' has already been removed from the server`,\n          type: 'error'\n        });\n      }\n    }\n  }\n\n  const handleFilter = filter => setFilter(filter);\n\n  const filteredPersons = filter ? persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase())) : persons\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Notification message={message} />\n\n      <Filter filter={filter} handleFilter={handleFilter} />\n\n      <h3>Add a new</h3>\n\n      <PersonForm\n        name={newName}\n        number={newNumber}\n        handleNewName={handleNewName}\n        handleNewNumber={handleNewNumber}\n        handleNewPerson={handleNewPerson}\n      />\n\n      <h3>Numbers</h3>\n\n      <Persons persons={filteredPersons} handleDeleteNumber={handleDeleteNumber} />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}